generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model User {
  id         String    @id
  name       String
  email      String    @unique
  password   String
  phone      String?
  role       UserRole  @default(CUSTOMER)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  addresses  Address[]

  @@map("users")
}

model Address {
  id         String   @id
  street     String
  number     String
  city       String
  state      String
  zip        String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String

  @@map("addresses")
}

model Category {
  id          String   @id
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("categories")
}

model Theme {
  id          String     @id
  name        String
  description String?
  magazines   Magazine[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@map("themes")
}

model Reporter {
  id             String    @id
  name           String
  email          String
  phone          String?
  cpf            String
  specialty      String
  status         String
  entry_date     DateTime
  departure_date DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@map("reporters")
}

model Photographer {
  avatar         String?
  id             String    @id
  name           String
  email          String
  phone          String?
  cpf            String
  specialty      String
  status         String
  entry_date     DateTime
  departure_date DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@map("photographers")
}

enum MagazinePublicationPeriod {
  ANNUALLY
  BIANNUAL
  MONTHLY
  BIMONTHLY
  WEEKLY
}

model Magazine {
  id                 String                    @id
  name               String
  description        String?
  year_founded       Int
  publication_period MagazinePublicationPeriod @default(MONTHLY)
  theme              Theme                     @relation(fields: [theme_id], references: [id])
  theme_id           String
  created_at         DateTime                  @default(now())
  updated_at         DateTime                  @updatedAt
  Edition            Edition[]

  @@map("magazines")
}

model Subtitle {
  id          String   @id
  name        String
  description String?
  type        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("subtitles")
}

model Edition {
  id               String   @id
  number           Int
  title            String
  cover_path       String
  price            Float
  year             Int
  number_of_pages  Int
  description      String?
  publication_date DateTime
  number_of_copies Int
  magazine         Magazine @relation(fields: [magazine_id], references: [id])
  magazine_id      String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  Order            Order[]

  @@map("editions")
}

model Graphics {
  id          String                  @id
  name        String
  address     String
  distributor GraphicsOnDistributor[]

  @@map("graphics")
}

model Distributor {
  id       String                  @id
  name     String
  address  String
  region   String
  graphics GraphicsOnDistributor[]

  @@map("distributor")
}

model GraphicsOnDistributor {
  id            String      @id @unique
  graphics      Graphics    @relation(fields: [graphicsId], references: [id])
  graphicsId    String
  distributor   Distributor @relation(fields: [distributorId], references: [id])
  distributorId String
  Order         Order[]
}

model Order {
  id                     String                @id
  receipt_date           DateTime
  departure_date         DateTime
  status                 String
  delivery_address       String
  example_number         Int
  edition                Edition               @relation(fields: [editon_Id], references: [id])
  editon_Id              String
  graphicsDistributor    GraphicsOnDistributor @relation(fields: [graphicsDistributor_id], references: [id])
  graphicsDistributor_id String
  price                  Float

  @@map("order")
}
