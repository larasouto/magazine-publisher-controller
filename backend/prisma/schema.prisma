generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model User {
  id         String    @id
  name       String
  email      String    @unique
  password   String
  phone      String?
  role       UserRole  @default(CUSTOMER)
  addresses  Address[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@map("users")
}

model Address {
  id         String   @id
  street     String
  number     String
  city       String
  state      String
  zip        String
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("addresses")
}

model Category {
  id          String   @id
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("categories")
}

model Theme {
  id          String     @id
  name        String
  description String?
  magazines   Magazine[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@map("themes")
}

enum ReporterStatus {
  ACTIVE
  INACTIVE
  VACATION
  PAUSED
}

model Reporter {
  id             String         @id
  name           String
  email          String
  phone          String?
  cpf            String
  specialty      String
  status         ReporterStatus @default(ACTIVE)
  entry_date     DateTime
  departure_date DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("reporters")
}

enum PhotographerStatus {
  ACTIVE
  INACTIVE
  VACATION
  PAUSED
}

model Photographer {
  avatar         String?
  id             String             @id
  name           String
  email          String
  phone          String?
  cpf            String
  specialty      String
  status         PhotographerStatus @default(ACTIVE)
  entry_date     DateTime
  departure_date DateTime?
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt

  @@map("photographers")
}

model Magazine {
  id                 String    @id
  name               String
  description        String?
  year_founded       Int
  publication_period String
  theme              Theme     @relation(fields: [theme_id], references: [id])
  theme_id           String
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  editions           Edition[]

  @@map("magazines")
}

model Subtitle {
  id          String   @id
  name        String
  description String?
  type        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("subtitles")
}

model Edition {
  id               String   @id
  number           Int
  title            String
  cover_path       String
  price            Float
  year             Int
  number_of_pages  Int
  description      String?
  publication_date DateTime
  number_of_copies Int
  magazine         Magazine @relation(fields: [magazine_id], references: [id])
  magazine_id      String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@map("editions")
}
