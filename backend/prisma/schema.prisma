generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id
  name                String
  email               String                @unique
  password            String
  phone               String?
  role                Int                   @default(0)
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  addresses           Address[]
  cards               Card[]
  subscriptions       Subscription[]
  Order               Order[]
  PaymentSubscription PaymentSubscription[]

  @@map("users")
}

model Subscription {
  id                  String                @id
  name                String
  description         String
  type                Int
  frequency           Int
  price               Float
  magazine            Magazine              @relation(fields: [magazine_id], references: [id])
  magazine_id         String
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  user                User                  @relation(fields: [user_id], references: [id])
  user_id             String
  PaymentSubscription PaymentSubscription[]

  @@map("subscriptions")
}

model Card {
  id              String   @id
  number          String
  holder          String
  expiration_date String
  security_code   String
  phone           String?
  type            Int
  flag            String
  billing_address String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user            User     @relation(fields: [user_id], references: [id])
  user_id         String

  @@map("cards")
}

model Address {
  id         String   @id
  street     String
  complement String?
  number     Int
  city       String
  state      String
  zip        String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String

  @@map("addresses")
}

model Category {
  id          String   @id
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("categories")
}

model Theme {
  id          String     @id
  name        String
  description String?
  magazines   Magazine[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@map("themes")
}

model Reporter {
  id             String    @id
  name           String
  email          String
  phone          String?
  cpf            String
  specialty      String
  status         String
  entry_date     DateTime
  departure_date DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@map("reporters")
}

model Photographer {
  avatar         String?
  id             String    @id
  name           String
  email          String
  phone          String?
  cpf            String
  specialty      String
  status         String
  entry_date     DateTime
  departure_date DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@map("photographers")
}

model Magazine {
  id                 String         @id
  name               String
  description        String?
  year_founded       Int
  publication_period Int
  theme              Theme          @relation(fields: [theme_id], references: [id])
  theme_id           String
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  editions           Edition[]
  subscriptions      Subscription[]
  advertisings       Advertising[]

  @@map("magazines")
}

model Subtitle {
  id          String   @id
  name        String
  description String?
  type        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("subtitles")
}

model Edition {
  id               String      @id
  number           Int
  title            String
  cover_path       String
  price            Float
  year             Int
  number_of_pages  Int
  description      String?
  publication_date DateTime
  number_of_copies Int
  magazine         Magazine    @relation(fields: [magazine_id], references: [id])
  magazine_id      String
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  OrderItem        OrderItem[]

  @@map("editions")
}

model OrderItem {
  id         String   @id
  quantity   Int
  edition    Edition  @relation(fields: [edition_id], references: [id])
  edition_id String
  order      Order    @relation(fields: [order_id], references: [id])
  order_id   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("orders_items")
}

model Order {
  id          String      @id
  customer    User        @relation(fields: [customer_id], references: [id])
  customer_id String
  card_id     String
  order_items OrderItem[]
  total_value Float
  address_id  String
  status      Int
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  @@map("orders")
}

model PaymentSubscription {
  id              String       @id
  customer        User         @relation(fields: [customer_id], references: [id])
  customer_id     String
  status          Int
  card_id         String
  subscription    Subscription @relation(fields: [subscription_id], references: [id])
  subscription_id String
  address_id      String
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  @@map("payment_subscriptions")
}

model Advertising {
  id              String   @id
  name            String
  description     String?
  category        Int
  number_of_pages Int
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  price           Float
  magazine        Magazine @relation(fields: [magazine_id], references: [id])
  magazine_id     String

  @@map("advertisings")
}
