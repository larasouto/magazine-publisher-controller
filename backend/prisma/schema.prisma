generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id
  name                  String
  email                 String                @unique
  password              String
  phone                 String?
  role                  Int                   @default(0)
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  addresses             Address[]
  cards                 Card[]
  subscriptions         Subscription[]
  orders                Order[]
  payment_subscriptions PaymentSubscription[]
  payment_advertisings  PaymentAdvertising[]
  reviews               Review[]
  advertisings          Advertising[]

  @@map("users")
}

model Subscription {
  id                    String                @id
  name                  String
  description           String
  type                  Int
  frequency             Int
  price                 Float
  magazine              Magazine              @relation(fields: [magazine_id], references: [id])
  magazine_id           String
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  user                  User                  @relation(fields: [user_id], references: [id])
  user_id               String
  payment_subscriptions PaymentSubscription[]

  @@map("subscriptions")
}

model Card {
  id              String   @id
  number          String
  holder          String
  expiration_date String
  security_code   String
  phone           String?
  type            Int
  flag            String
  billing_address String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user            User     @relation(fields: [user_id], references: [id])
  user_id         String

  @@map("cards")
}

model Address {
  id         String   @id
  street     String
  complement String?
  number     Int
  city       String
  state      String
  zip        String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String

  @@map("addresses")
}

model Category {
  id          String   @id
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("categories")
}

model Theme {
  id          String     @id
  name        String
  description String?
  magazines   Magazine[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@map("themes")
}

model Reporter {
  id             String    @id
  name           String
  email          String
  phone          String?
  cpf            String
  specialty      String
  status         String
  entry_date     DateTime
  departure_date DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@map("reporters")
}

model Photographer {
  avatar         String?
  id             String    @id
  name           String
  email          String
  phone          String?
  cpf            String
  specialty      String
  status         String
  entry_date     DateTime
  departure_date DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@map("photographers")
}

model Magazine {
  id                 String         @id
  name               String
  description        String?
  year_founded       Int
  publication_period Int
  theme              Theme          @relation(fields: [theme_id], references: [id])
  theme_id           String
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  editions           Edition[]
  subscriptions      Subscription[]
  advertisings       Advertising[]

  @@map("magazines")
}

model Subtitle {
  id          String   @id
  name        String
  description String?
  type        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("subtitles")
}

model Edition {
  id               String          @id
  number           Int
  title            String
  cover_path       String
  price            Float
  year             Int
  number_of_pages  Int
  description      String?
  publication_date DateTime
  number_of_copies Int
  magazine         Magazine        @relation(fields: [magazine_id], references: [id])
  magazine_id      String
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  order_items      OrderItem[]
  reviews          Review[]
  GraphicsOrder    GraphicsOrder[]

  @@map("editions")
}

model OrderItem {
  id         String   @id
  quantity   Int
  edition    Edition  @relation(fields: [edition_id], references: [id])
  edition_id String
  order      Order    @relation(fields: [order_id], references: [id])
  order_id   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("orders_items")
}

model Order {
  id          String      @id
  customer    User        @relation(fields: [customer_id], references: [id])
  customer_id String
  card_id     String
  order_items OrderItem[]
  total_value Float
  address_id  String
  status      Int
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  @@map("orders")
}

model PaymentSubscription {
  id              String       @id
  customer        User         @relation(fields: [customer_id], references: [id])
  customer_id     String
  status          Int
  card_id         String
  subscription    Subscription @relation(fields: [subscription_id], references: [id])
  subscription_id String
  address_id      String
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  @@map("payment_subscriptions")
}

model Advertising {
  id                   String               @id
  image_path           String
  title                String
  description          String?
  category             Int
  type                 Int
  status               Int
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  price                Float
  extra_information    String?
  paid                 Boolean              @default(false)
  magazine             Magazine             @relation(fields: [magazine_id], references: [id])
  magazine_id          String
  user                 User                 @relation(fields: [user_id], references: [id])
  user_id              String
  payment_advertisings PaymentAdvertising[]

  @@map("advertisings")
}

model PaymentAdvertising {
  id             String      @id
  customer       User        @relation(fields: [customer_id], references: [id])
  customer_id    String
  status         Int
  card_id        String
  advertising    Advertising @relation(fields: [advertising_id], references: [id])
  advertising_id String
  address_id     String
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt

  @@map("payment_advertisings")
}

model Review {
  id          String   @id
  title       String
  review      String
  rating      Int
  edition     Edition  @relation(fields: [edition_id], references: [id])
  edition_id  String
  reviewer    User     @relation(fields: [reviewer_id], references: [id])
  reviewer_id String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("reviews")

model Graphics {
  id                    String                  @id
  name                  String
  address               String
  graphicsOnDistributor GraphicsOnDistributor[]

  @@map("graphics")
}

model Distributor {
  id                    String                  @id
  name                  String
  address               String
  region                String
  graphicsOnDistributor GraphicsOnDistributor[]

  @@map("distributor")
}

model GraphicsOnDistributor {
  id            String          @id @unique
  graphics      Graphics        @relation(fields: [graphicsId], references: [id])
  graphicsId    String
  distributor   Distributor     @relation(fields: [distributorId], references: [id])
  distributorId String
  GraphicsOrder GraphicsOrder[]

  @@map("graphicsOnDistributor")
}

model GraphicsOrder {
  id                     String                @id
  receipt_date           DateTime
  departure_date         DateTime?
  status                 String
  delivery_address       String
  example_number         Int
  price                  Float
  edition                Edition               @relation(fields: [edition_Id], references: [id])
  edition_Id             String
  graphicsDistributor    GraphicsOnDistributor @relation(fields: [graphicsDistributor_id], references: [id])
  graphicsDistributor_id String
  bookstore              Bookstore             @relation(fields: [bookstore_id], references: [id])
  bookstore_id           String
  orderReturn            GraphicsOrderReturn[]

  @@map("order")
}

model GraphicsOrderReturn {
  id               String        @id
  return_number    Int
  return_date      DateTime
  graphicsOrder    GraphicsOrder @relation(fields: [graphicsOrder_Id], references: [id])
  graphicsOrder_Id String

  @@map("orderReturn")
}

model Bookstore {
  id            String          @id
  name          String
  address       String
  GraphicsOrder GraphicsOrder[]

  @@map("bookstore")
}
